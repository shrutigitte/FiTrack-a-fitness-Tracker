/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { DatePipe, NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, booleanAttribute } from '@angular/core';
import { NzIconModule } from 'ng-zorro-antd/icon';
import * as i0 from "@angular/core";
import * as i1 from "ng-zorro-antd/icon";
export class NzCronExpressionPreviewComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.TimeList = [];
        this.visible = true;
        this.nzSemantic = null;
        this.loadMorePreview = new EventEmitter();
        this.isExpand = true;
    }
    setExpand() {
        this.isExpand = !this.isExpand;
        this.cdr.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NzCronExpressionPreviewComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.1.2", type: NzCronExpressionPreviewComponent, isStandalone: true, selector: "nz-cron-expression-preview", inputs: { TimeList: "TimeList", visible: ["visible", "visible", booleanAttribute], locale: "locale", nzSemantic: "nzSemantic" }, outputs: { loadMorePreview: "loadMorePreview" }, exportAs: ["nzCronExpressionPreview"], ngImport: i0, template: ` <div class="ant-collapse ant-collapse-borderless ant-cron-expression-preview">
    <div class="ant-cron-expression-preview-dateTime" [class.ant-cron-expression-preview-dateTime-center]="!isExpand">
      @if (visible) {
        @if (!nzSemantic) {
          {{ TimeList[0] | date: 'YYYY-MM-dd HH:mm:ss' }}
        } @else {
          <ng-template [ngTemplateOutlet]="nzSemantic" />
        }
      } @else {
        {{ locale.cronError }}
      }
    </div>
    @if (visible && !isExpand) {
      <div class="ant-cron-expression-preview-content">
        <ul class="ant-cron-expression-preview-list">
          @for (item of TimeList; track item) {
            <li>
              {{ item | date: 'YYYY-MM-dd HH:mm:ss' }}
            </li>
          }
          <li><a (click)="loadMorePreview.emit()">···</a></li>
        </ul>
      </div>
    }

    <ul class="ant-cron-expression-preview-icon">
      @if (isExpand) {
        <li><span nz-icon nzType="down" nzTheme="outline" (click)="setExpand()"></span></li>
      } @else {
        <li><span nz-icon nzType="up" nzTheme="outline" (click)="setExpand()"></span></li>
      }
    </ul>
  </div>`, isInline: true, dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: DatePipe, name: "date" }, { kind: "ngmodule", type: NzIconModule }, { kind: "directive", type: i1.NzIconDirective, selector: "[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NzCronExpressionPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    selector: 'nz-cron-expression-preview',
                    exportAs: 'nzCronExpressionPreview',
                    template: ` <div class="ant-collapse ant-collapse-borderless ant-cron-expression-preview">
    <div class="ant-cron-expression-preview-dateTime" [class.ant-cron-expression-preview-dateTime-center]="!isExpand">
      @if (visible) {
        @if (!nzSemantic) {
          {{ TimeList[0] | date: 'YYYY-MM-dd HH:mm:ss' }}
        } @else {
          <ng-template [ngTemplateOutlet]="nzSemantic" />
        }
      } @else {
        {{ locale.cronError }}
      }
    </div>
    @if (visible && !isExpand) {
      <div class="ant-cron-expression-preview-content">
        <ul class="ant-cron-expression-preview-list">
          @for (item of TimeList; track item) {
            <li>
              {{ item | date: 'YYYY-MM-dd HH:mm:ss' }}
            </li>
          }
          <li><a (click)="loadMorePreview.emit()">···</a></li>
        </ul>
      </div>
    }

    <ul class="ant-cron-expression-preview-icon">
      @if (isExpand) {
        <li><span nz-icon nzType="down" nzTheme="outline" (click)="setExpand()"></span></li>
      } @else {
        <li><span nz-icon nzType="up" nzTheme="outline" (click)="setExpand()"></span></li>
      }
    </ul>
  </div>`,
                    imports: [NgTemplateOutlet, DatePipe, NzIconModule],
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { TimeList: [{
                type: Input
            }], visible: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], locale: [{
                type: Input
            }], nzSemantic: [{
                type: Input
            }], loadMorePreview: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi1leHByZXNzaW9uLXByZXZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tcG9uZW50cy9jcm9uLWV4cHJlc3Npb24vY3Jvbi1leHByZXNzaW9uLXByZXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RCxPQUFPLEVBQ0wsdUJBQXVCLEVBRXZCLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFFTixpQkFBaUIsRUFDakIsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBMkNsRCxNQUFNLE9BQU8sZ0NBQWdDO0lBUzNDLFlBQW9CLEdBQXNCO1FBQXRCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBUmpDLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDUyxZQUFPLEdBQVksSUFBSSxDQUFDO1FBRXZELGVBQVUsR0FBNkIsSUFBSSxDQUFDO1FBQ2xDLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUU5RCxhQUFRLEdBQVksSUFBSSxDQUFDO0lBRW9CLENBQUM7SUFFOUMsU0FBUztRQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs4R0FkVSxnQ0FBZ0M7a0dBQWhDLGdDQUFnQyw4SEFFdkIsZ0JBQWdCLGlLQXRDMUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBZ0NILDREQUNHLGdCQUFnQiwrSUFBRSxRQUFRLDRDQUFFLFlBQVk7OzJGQUd2QyxnQ0FBZ0M7a0JBekM1QyxTQUFTO21CQUFDO29CQUNULGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsUUFBUSxFQUFFLDRCQUE0QjtvQkFDdEMsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQWdDSDtvQkFDUCxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDO29CQUNuRCxVQUFVLEVBQUUsSUFBSTtpQkFDakI7c0ZBRVUsUUFBUTtzQkFBaEIsS0FBSztnQkFDa0MsT0FBTztzQkFBOUMsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFDN0IsTUFBTTtzQkFBZCxLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ2EsZUFBZTtzQkFBakMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IERhdGVQaXBlLCBOZ1RlbXBsYXRlT3V0bGV0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgYm9vbGVhbkF0dHJpYnV0ZVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnpDcm9uRXhwcmVzc2lvbkNyb25FcnJvckkxOG4gfSBmcm9tICduZy16b3Jyby1hbnRkL2kxOG4nO1xuaW1wb3J0IHsgTnpJY29uTW9kdWxlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pY29uJztcblxuQENvbXBvbmVudCh7XG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBzZWxlY3RvcjogJ256LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3JyxcbiAgZXhwb3J0QXM6ICduekNyb25FeHByZXNzaW9uUHJldmlldycsXG4gIHRlbXBsYXRlOiBgIDxkaXYgY2xhc3M9XCJhbnQtY29sbGFwc2UgYW50LWNvbGxhcHNlLWJvcmRlcmxlc3MgYW50LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3XCI+XG4gICAgPGRpdiBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1kYXRlVGltZVwiIFtjbGFzcy5hbnQtY3Jvbi1leHByZXNzaW9uLXByZXZpZXctZGF0ZVRpbWUtY2VudGVyXT1cIiFpc0V4cGFuZFwiPlxuICAgICAgQGlmICh2aXNpYmxlKSB7XG4gICAgICAgIEBpZiAoIW56U2VtYW50aWMpIHtcbiAgICAgICAgICB7eyBUaW1lTGlzdFswXSB8IGRhdGU6ICdZWVlZLU1NLWRkIEhIOm1tOnNzJyB9fVxuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICA8bmctdGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwibnpTZW1hbnRpY1wiIC8+XG4gICAgICAgIH1cbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICB7eyBsb2NhbGUuY3JvbkVycm9yIH19XG4gICAgICB9XG4gICAgPC9kaXY+XG4gICAgQGlmICh2aXNpYmxlICYmICFpc0V4cGFuZCkge1xuICAgICAgPGRpdiBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1jb250ZW50XCI+XG4gICAgICAgIDx1bCBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1saXN0XCI+XG4gICAgICAgICAgQGZvciAoaXRlbSBvZiBUaW1lTGlzdDsgdHJhY2sgaXRlbSkge1xuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICB7eyBpdGVtIHwgZGF0ZTogJ1lZWVktTU0tZGQgSEg6bW06c3MnIH19XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIH1cbiAgICAgICAgICA8bGk+PGEgKGNsaWNrKT1cImxvYWRNb3JlUHJldmlldy5lbWl0KClcIj7Ct8K3wrc8L2E+PC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgIH1cblxuICAgIDx1bCBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1pY29uXCI+XG4gICAgICBAaWYgKGlzRXhwYW5kKSB7XG4gICAgICAgIDxsaT48c3BhbiBuei1pY29uIG56VHlwZT1cImRvd25cIiBuelRoZW1lPVwib3V0bGluZVwiIChjbGljayk9XCJzZXRFeHBhbmQoKVwiPjwvc3Bhbj48L2xpPlxuICAgICAgfSBAZWxzZSB7XG4gICAgICAgIDxsaT48c3BhbiBuei1pY29uIG56VHlwZT1cInVwXCIgbnpUaGVtZT1cIm91dGxpbmVcIiAoY2xpY2spPVwic2V0RXhwYW5kKClcIj48L3NwYW4+PC9saT5cbiAgICAgIH1cbiAgICA8L3VsPlxuICA8L2Rpdj5gLFxuICBpbXBvcnRzOiBbTmdUZW1wbGF0ZU91dGxldCwgRGF0ZVBpcGUsIE56SWNvbk1vZHVsZV0sXG4gIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgTnpDcm9uRXhwcmVzc2lvblByZXZpZXdDb21wb25lbnQge1xuICBASW5wdXQoKSBUaW1lTGlzdDogRGF0ZVtdID0gW107XG4gIEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KSB2aXNpYmxlOiBib29sZWFuID0gdHJ1ZTtcbiAgQElucHV0KCkgbG9jYWxlITogTnpDcm9uRXhwcmVzc2lvbkNyb25FcnJvckkxOG47XG4gIEBJbnB1dCgpIG56U2VtYW50aWM6IFRlbXBsYXRlUmVmPHZvaWQ+IHwgbnVsbCA9IG51bGw7XG4gIEBPdXRwdXQoKSByZWFkb25seSBsb2FkTW9yZVByZXZpZXcgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgaXNFeHBhbmQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBzZXRFeHBhbmQoKTogdm9pZCB7XG4gICAgdGhpcy5pc0V4cGFuZCA9ICF0aGlzLmlzRXhwYW5kO1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG59XG4iXX0=