/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
/** Returns the ratio of the device's physical pixel resolution to the css pixel resolution */
export function getPixelRatio() {
    return window.devicePixelRatio || 1;
}
export function toLowercaseSeparator(key) {
    return key.replace(/([A-Z])/g, '-$1').toLowerCase();
}
export function getStyleStr(style) {
    const keys = Object.keys(style);
    const styleCss = keys.map((key) => `${toLowercaseSeparator(key)}: ${style[key]};`);
    return styleCss.join(' ');
}
/** Whether to re-render the watermark */
export function reRendering(mutation, watermarkElement) {
    let flag = false;
    // Whether to delete the watermark node
    if (mutation.removedNodes.length) {
        flag = Array.from(mutation.removedNodes).some(node => node === watermarkElement);
    }
    // Whether the watermark dom property value has been modified
    if (mutation.type === 'attributes' && mutation.target === watermarkElement) {
        flag = true;
    }
    return flag;
}
/** Rotate with the watermark as the center point */
export function rotateWatermark(ctx, rotateX, rotateY, rotate) {
    ctx.translate(rotateX, rotateY);
    ctx.rotate((Math.PI / 180) * Number(rotate));
    ctx.translate(-rotateX, -rotateY);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbXBvbmVudHMvd2F0ZXItbWFyay91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUlILDhGQUE4RjtBQUM5RixNQUFNLFVBQVUsYUFBYTtJQUMzQixPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxHQUE4QjtJQUNqRSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3RELENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQTBCO0lBQ3BELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFxQyxDQUFDO0lBQ3BFLE1BQU0sUUFBUSxHQUFhLElBQUksQ0FBQyxHQUFHLENBQ2pDLENBQUMsR0FBOEIsRUFBRSxFQUFFLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FDbkYsQ0FBQztJQUNGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRUQseUNBQXlDO0FBQ3pDLE1BQU0sVUFBVSxXQUFXLENBQUMsUUFBd0IsRUFBRSxnQkFBOEI7SUFDbEYsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLHVDQUF1QztJQUN2QyxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFDRCw2REFBNkQ7SUFDN0QsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLFlBQVksSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLGdCQUFnQixFQUFFLENBQUM7UUFDM0UsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxvREFBb0Q7QUFDcEQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxHQUE2QixFQUFFLE9BQWUsRUFBRSxPQUFlLEVBQUUsTUFBYztJQUM3RyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM3QyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IE1hcmtTdHlsZUNhbnZhc1R5cGUgfSBmcm9tICcuL3R5cGluZ3MnO1xuXG4vKiogUmV0dXJucyB0aGUgcmF0aW8gb2YgdGhlIGRldmljZSdzIHBoeXNpY2FsIHBpeGVsIHJlc29sdXRpb24gdG8gdGhlIGNzcyBwaXhlbCByZXNvbHV0aW9uICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGl4ZWxSYXRpbygpOiBudW1iZXIge1xuICByZXR1cm4gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTG93ZXJjYXNlU2VwYXJhdG9yKGtleToga2V5b2YgTWFya1N0eWxlQ2FudmFzVHlwZSk6IHN0cmluZyB7XG4gIHJldHVybiBrZXkucmVwbGFjZSgvKFtBLVpdKS9nLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlU3RyKHN0eWxlOiBNYXJrU3R5bGVDYW52YXNUeXBlKTogc3RyaW5nIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlKSBhcyBBcnJheTxrZXlvZiBNYXJrU3R5bGVDYW52YXNUeXBlPjtcbiAgY29uc3Qgc3R5bGVDc3M6IHN0cmluZ1tdID0ga2V5cy5tYXAoXG4gICAgKGtleToga2V5b2YgTWFya1N0eWxlQ2FudmFzVHlwZSkgPT4gYCR7dG9Mb3dlcmNhc2VTZXBhcmF0b3Ioa2V5KX06ICR7c3R5bGVba2V5XX07YFxuICApO1xuICByZXR1cm4gc3R5bGVDc3Muam9pbignICcpO1xufVxuXG4vKiogV2hldGhlciB0byByZS1yZW5kZXIgdGhlIHdhdGVybWFyayAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlUmVuZGVyaW5nKG11dGF0aW9uOiBNdXRhdGlvblJlY29yZCwgd2F0ZXJtYXJrRWxlbWVudD86IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gIGxldCBmbGFnID0gZmFsc2U7XG4gIC8vIFdoZXRoZXIgdG8gZGVsZXRlIHRoZSB3YXRlcm1hcmsgbm9kZVxuICBpZiAobXV0YXRpb24ucmVtb3ZlZE5vZGVzLmxlbmd0aCkge1xuICAgIGZsYWcgPSBBcnJheS5mcm9tKG11dGF0aW9uLnJlbW92ZWROb2Rlcykuc29tZShub2RlID0+IG5vZGUgPT09IHdhdGVybWFya0VsZW1lbnQpO1xuICB9XG4gIC8vIFdoZXRoZXIgdGhlIHdhdGVybWFyayBkb20gcHJvcGVydHkgdmFsdWUgaGFzIGJlZW4gbW9kaWZpZWRcbiAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdhdHRyaWJ1dGVzJyAmJiBtdXRhdGlvbi50YXJnZXQgPT09IHdhdGVybWFya0VsZW1lbnQpIHtcbiAgICBmbGFnID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmxhZztcbn1cblxuLyoqIFJvdGF0ZSB3aXRoIHRoZSB3YXRlcm1hcmsgYXMgdGhlIGNlbnRlciBwb2ludCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVdhdGVybWFyayhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgcm90YXRlWDogbnVtYmVyLCByb3RhdGVZOiBudW1iZXIsIHJvdGF0ZTogbnVtYmVyKTogdm9pZCB7XG4gIGN0eC50cmFuc2xhdGUocm90YXRlWCwgcm90YXRlWSk7XG4gIGN0eC5yb3RhdGUoKE1hdGguUEkgLyAxODApICogTnVtYmVyKHJvdGF0ZSkpO1xuICBjdHgudHJhbnNsYXRlKC1yb3RhdGVYLCAtcm90YXRlWSk7XG59XG4iXX0=