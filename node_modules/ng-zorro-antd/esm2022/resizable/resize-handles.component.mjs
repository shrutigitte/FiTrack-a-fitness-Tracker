/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { NzResizeHandleComponent } from './resize-handle.component';
import * as i0 from "@angular/core";
export const DEFAULT_RESIZE_DIRECTION = [
    'bottomRight',
    'topRight',
    'bottomLeft',
    'topLeft',
    'bottom',
    'right',
    'top',
    'left'
];
function normalizeResizeHandleOptions(value) {
    return value.map(val => {
        if (typeof val === 'string') {
            return {
                direction: val,
                cursorType: 'window'
            };
        }
        return val;
    });
}
export class NzResizeHandlesComponent {
    constructor() {
        this.nzDirections = DEFAULT_RESIZE_DIRECTION;
        this.resizeHandleOptions = normalizeResizeHandleOptions(this.nzDirections);
    }
    ngOnChanges(changes) {
        if (changes.nzDirections) {
            this.resizeHandleOptions = normalizeResizeHandleOptions(changes.nzDirections.currentValue);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NzResizeHandlesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.1.2", type: NzResizeHandlesComponent, isStandalone: true, selector: "nz-resize-handles", inputs: { nzDirections: "nzDirections" }, exportAs: ["nzResizeHandles"], usesOnChanges: true, ngImport: i0, template: `
    @for (option of resizeHandleOptions; track option) {
      <nz-resize-handle [nzDirection]="option.direction" [nzCursorType]="option.cursorType" />
    }
  `, isInline: true, dependencies: [{ kind: "component", type: NzResizeHandleComponent, selector: "nz-resize-handle, [nz-resize-handle]", inputs: ["nzDirection", "nzCursorType"], outputs: ["nzMouseDown"], exportAs: ["nzResizeHandle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.2", ngImport: i0, type: NzResizeHandlesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'nz-resize-handles',
                    exportAs: 'nzResizeHandles',
                    template: `
    @for (option of resizeHandleOptions; track option) {
      <nz-resize-handle [nzDirection]="option.direction" [nzCursorType]="option.cursorType" />
    }
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    imports: [NzResizeHandleComponent],
                    standalone: true
                }]
        }], propDecorators: { nzDirections: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLWhhbmRsZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tcG9uZW50cy9yZXNpemFibGUvcmVzaXplLWhhbmRsZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUVwRyxPQUFPLEVBQW1DLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBRXJHLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUF3QjtJQUMzRCxhQUFhO0lBQ2IsVUFBVTtJQUNWLFlBQVk7SUFDWixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxLQUFLO0lBQ0wsTUFBTTtDQUNQLENBQUM7QUFPRixTQUFTLDRCQUE0QixDQUFDLEtBQXNEO0lBQzFGLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNyQixJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzVCLE9BQU87Z0JBQ0wsU0FBUyxFQUFFLEdBQUc7Z0JBQ2QsVUFBVSxFQUFFLFFBQVE7YUFDckIsQ0FBQztRQUNKLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQWNELE1BQU0sT0FBTyx3QkFBd0I7SUFackM7UUFhVyxpQkFBWSxHQUFvRCx3QkFBd0IsQ0FBQztRQUVsRyx3QkFBbUIsR0FBRyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7S0FPdkU7SUFMQyxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLDRCQUE0QixDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0YsQ0FBQztJQUNILENBQUM7OEdBVFUsd0JBQXdCO2tHQUF4Qix3QkFBd0IsMktBVHpCOzs7O0dBSVQsNERBRVMsdUJBQXVCOzsyRkFHdEIsd0JBQXdCO2tCQVpwQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFFBQVEsRUFBRTs7OztHQUlUO29CQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztvQkFDbEMsVUFBVSxFQUFFLElBQUk7aUJBQ2pCOzhCQUVVLFlBQVk7c0JBQXBCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE56Q3Vyc29yVHlwZSwgTnpSZXNpemVEaXJlY3Rpb24sIE56UmVzaXplSGFuZGxlQ29tcG9uZW50IH0gZnJvbSAnLi9yZXNpemUtaGFuZGxlLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFU0laRV9ESVJFQ1RJT046IE56UmVzaXplRGlyZWN0aW9uW10gPSBbXG4gICdib3R0b21SaWdodCcsXG4gICd0b3BSaWdodCcsXG4gICdib3R0b21MZWZ0JyxcbiAgJ3RvcExlZnQnLFxuICAnYm90dG9tJyxcbiAgJ3JpZ2h0JyxcbiAgJ3RvcCcsXG4gICdsZWZ0J1xuXTtcblxuZXhwb3J0IGludGVyZmFjZSBOelJlc2l6ZUhhbmRsZU9wdGlvbiB7XG4gIGRpcmVjdGlvbjogTnpSZXNpemVEaXJlY3Rpb247XG4gIGN1cnNvclR5cGU6IE56Q3Vyc29yVHlwZTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUmVzaXplSGFuZGxlT3B0aW9ucyh2YWx1ZTogQXJyYXk8TnpSZXNpemVEaXJlY3Rpb24gfCBOelJlc2l6ZUhhbmRsZU9wdGlvbj4pOiBOelJlc2l6ZUhhbmRsZU9wdGlvbltdIHtcbiAgcmV0dXJuIHZhbHVlLm1hcCh2YWwgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlyZWN0aW9uOiB2YWwsXG4gICAgICAgIGN1cnNvclR5cGU6ICd3aW5kb3cnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH0pO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei1yZXNpemUtaGFuZGxlcycsXG4gIGV4cG9ydEFzOiAnbnpSZXNpemVIYW5kbGVzJyxcbiAgdGVtcGxhdGU6IGBcbiAgICBAZm9yIChvcHRpb24gb2YgcmVzaXplSGFuZGxlT3B0aW9uczsgdHJhY2sgb3B0aW9uKSB7XG4gICAgICA8bnotcmVzaXplLWhhbmRsZSBbbnpEaXJlY3Rpb25dPVwib3B0aW9uLmRpcmVjdGlvblwiIFtuekN1cnNvclR5cGVdPVwib3B0aW9uLmN1cnNvclR5cGVcIiAvPlxuICAgIH1cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGltcG9ydHM6IFtOelJlc2l6ZUhhbmRsZUNvbXBvbmVudF0sXG4gIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgTnpSZXNpemVIYW5kbGVzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbnpEaXJlY3Rpb25zOiBBcnJheTxOelJlc2l6ZURpcmVjdGlvbiB8IE56UmVzaXplSGFuZGxlT3B0aW9uPiA9IERFRkFVTFRfUkVTSVpFX0RJUkVDVElPTjtcblxuICByZXNpemVIYW5kbGVPcHRpb25zID0gbm9ybWFsaXplUmVzaXplSGFuZGxlT3B0aW9ucyh0aGlzLm56RGlyZWN0aW9ucyk7XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLm56RGlyZWN0aW9ucykge1xuICAgICAgdGhpcy5yZXNpemVIYW5kbGVPcHRpb25zID0gbm9ybWFsaXplUmVzaXplSGFuZGxlT3B0aW9ucyhjaGFuZ2VzLm56RGlyZWN0aW9ucy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbiAgfVxufVxuIl19