{"version":3,"file":"ng-zorro-antd-pipes.mjs","sources":["../../components/pipes/nz-aggregate.pipe.ts","../../components/pipes/nz-bytes.pipe.ts","../../components/pipes/nz-css-unit.pipe.ts","../../components/pipes/nz-ellipsis.pipe.ts","../../components/pipes/nz-safe-null.pipe.ts","../../components/pipes/nz-sanitizer.pipe.ts","../../components/pipes/nz-trim.pipe.ts","../../components/pipes/nz-pipes.module.ts","../../components/pipes/public-api.ts","../../components/pipes/ng-zorro-antd-pipes.ts"],"sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { sum } from 'ng-zorro-antd/core/util';\n\nexport type AggregateMethod = 'sum' | 'max' | 'min' | 'avg';\n\n@Pipe({\n  name: 'nzAggregate',\n  standalone: true\n})\nexport class NzAggregatePipe implements PipeTransform {\n  transform(value: number[], method: AggregateMethod): undefined | number {\n    if (!Array.isArray(value)) {\n      return value;\n    }\n\n    if (value.length === 0) {\n      return undefined;\n    }\n\n    switch (method) {\n      case 'sum':\n        return sum(value);\n      case 'avg':\n        return sum(value) / value.length;\n      case 'max':\n        return Math.max(...value);\n      case 'min':\n        return Math.min(...value);\n      default:\n        throw Error(`Invalid Pipe Arguments: Aggregate pipe doesn't support this type`);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { isNumberFinite, toDecimal } from 'ng-zorro-antd/core/util';\n\nexport type ByteUnit = 'B' | 'kB' | 'KB' | 'MB' | 'GB' | 'TB';\n\n@Pipe({\n  name: 'nzBytes',\n  standalone: true\n})\nexport class NzBytesPipe implements PipeTransform {\n  static formats: { [key in ByteUnit]: { max: number; prev?: ByteUnit } } = {\n    B: { max: 1024 },\n    kB: { max: Math.pow(1024, 2), prev: 'B' },\n    KB: { max: Math.pow(1024, 2), prev: 'B' },\n    MB: { max: Math.pow(1024, 3), prev: 'kB' },\n    GB: { max: Math.pow(1024, 4), prev: 'MB' },\n    TB: { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }\n  };\n\n  transform(input: NzSafeAny, decimal: number = 0, from: ByteUnit = 'B', to?: ByteUnit): NzSafeAny {\n    if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n      return input;\n    }\n\n    let bytes = input;\n    let unit = from;\n    while (unit !== 'B') {\n      bytes *= 1024;\n      unit = NzBytesPipe.formats[unit].prev!;\n    }\n\n    if (to) {\n      const format = NzBytesPipe.formats[to];\n\n      const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n\n      return NzBytesPipe.formatResult(result, to);\n    }\n\n    for (const key in NzBytesPipe.formats) {\n      if (NzBytesPipe.formats.hasOwnProperty(key)) {\n        const format = NzBytesPipe.formats[key as ByteUnit];\n        if (bytes < format.max) {\n          const result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n\n          return NzBytesPipe.formatResult(result, key);\n        }\n      }\n    }\n  }\n\n  static formatResult(result: number, unit: string): string {\n    return `${result} ${unit}`;\n  }\n\n  static calculateResult(format: { max: number; prev?: ByteUnit }, bytes: number): number {\n    const prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n    return prev ? bytes / prev.max : bytes;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'nzToCssUnit',\n  standalone: true\n})\nexport class NzToCssUnitPipe implements PipeTransform {\n  transform(value: number | string, defaultUnit: string = 'px'): string {\n    return typeof value === 'number' ? `${value}${defaultUnit}` : value;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\n@Pipe({\n  name: 'nzEllipsis',\n  standalone: true\n})\nexport class NzEllipsisPipe implements PipeTransform {\n  transform(value: NzSafeAny, length?: number, suffix: string = ''): NzSafeAny {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    const len = typeof length === 'undefined' ? value.length : length;\n\n    if (value.length <= len) {\n      return value;\n    }\n\n    return value.substring(0, len) + suffix;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { isNil } from 'ng-zorro-antd/core/util';\n\n/**\n * @deprecated v17.0.0 - Use Nullish coalescing operator (??) instead of `NzSafeNullPipe`.\n */\n@Pipe({\n  name: 'nzSafeNull',\n  standalone: true\n})\nexport class NzSafeNullPipe implements PipeTransform {\n  transform<T>(value: T, replace: string = ''): T | string {\n    if (isNil(value)) {\n      return replace;\n    }\n    return value;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeStyle, SafeUrl } from '@angular/platform-browser';\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\ntype DomSanitizerType = 'html' | 'style' | 'url' | 'resourceUrl';\n\n@Pipe({\n  name: 'nzSanitizer',\n  standalone: true\n})\nexport class NzSanitizerPipe implements PipeTransform {\n  constructor(protected sanitizer: DomSanitizer) {}\n  transform(value: NzSafeAny, type: 'html'): SafeHtml;\n  transform(value: NzSafeAny, type: 'style'): SafeStyle;\n  transform(value: NzSafeAny, type: 'url'): SafeUrl;\n  transform(value: NzSafeAny, type: 'resourceUrl'): SafeResourceUrl;\n  transform(value: NzSafeAny, type: DomSanitizerType = 'html'): SafeHtml | SafeStyle | SafeUrl | SafeResourceUrl {\n    switch (type) {\n      case 'html':\n        return this.sanitizer.bypassSecurityTrustHtml(value);\n      case 'style':\n        return this.sanitizer.bypassSecurityTrustStyle(value);\n      case 'url':\n        return this.sanitizer.bypassSecurityTrustUrl(value);\n      case 'resourceUrl':\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n      default:\n        throw new Error(`Invalid safe type specified`);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'nzTrim',\n  standalone: true\n})\nexport class NzTrimPipe implements PipeTransform {\n  // TODO(chensimeng) trimEnd, trimStart\n  transform(text: string): string {\n    return text.trim();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\n\nimport { NzAggregatePipe } from './nz-aggregate.pipe';\nimport { NzBytesPipe } from './nz-bytes.pipe';\nimport { NzToCssUnitPipe } from './nz-css-unit.pipe';\nimport { NzEllipsisPipe } from './nz-ellipsis.pipe';\nimport { NzSafeNullPipe } from './nz-safe-null.pipe';\nimport { NzSanitizerPipe } from './nz-sanitizer.pipe';\nimport { NzTrimPipe } from './nz-trim.pipe';\n\nconst pipes = [\n  NzToCssUnitPipe,\n  NzSafeNullPipe,\n  NzSanitizerPipe,\n  NzTrimPipe,\n  NzBytesPipe,\n  NzAggregatePipe,\n  NzEllipsisPipe\n];\n\n@NgModule({\n  imports: [pipes],\n  exports: [pipes]\n})\nexport class NzPipesModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './nz-pipes.module';\nexport * from './nz-css-unit.pipe';\nexport * from './nz-bytes.pipe';\nexport * from './nz-ellipsis.pipe';\nexport * from './nz-aggregate.pipe';\nexport * from './nz-safe-null.pipe';\nexport * from './nz-sanitizer.pipe';\nexport * from './nz-trim.pipe';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}